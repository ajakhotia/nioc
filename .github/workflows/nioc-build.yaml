name: nioc-build

on:
  workflow_run:
    workflows: [ "nioc-dev-base" ]
    types: [ completed ]

jobs:
  image-build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os_base:
          - ubuntu:22.04
          - ubuntu:24.04
        toolchain:
          - linux-clang-default
          - linux-gnu-default

    steps:
      - name: checkout-self
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: setup-buildx
        uses: docker/setup-buildx-action@v3

      - name: setup-login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: normalize-repository-name
        id: normalize-repository-name
        uses: ./.github/actions/normalize
        with:
          string: ${{ github.repository }}

      - name: normalize-os-name
        id: normalize-os-name
        uses: ./.github/actions/normalize
        with:
          string: ${{ matrix.os_base }}

      - name: find-tag
        id: tag
        uses: digital-ai/query-tag-action@v2
        with:
          commit-ish: HEAD
          exact-match: 'true'
          include: 'v*'
          skip-unshallow: 'true'

      - name: docker-metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.normalize-repository-name.outputs.string }}-${{ steps.normalize-os-name.outputs.string }}-${{ matrix.toolchain }}
          tags: |
            type=raw,value=${{ github.event.workflow_run.head_sha }}
            type=raw,value=latest,enable=${{ github.event.workflow_run.head_branch == 'main' }}
            type=raw,value=${{ steps.tag.outputs.tag }},enable=${{ contains(steps.tag.outputs.tag, 'NO_TAGS') == false }}

      - name: nioc-build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/ubuntu.dockerfile
          target: nioc-build
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          cache-from: |
            type=registry,mode=max,ref=ghcr.io/${{ steps.normalize-repository-name.outputs.string }}-dev-base-${{ steps.normalize-os-name.outputs.string }}-${{ matrix.toolchain }}:buildcache
            type=registry,mode=max,ref=ghcr.io/${{ steps.normalize-repository-name.outputs.string }}-build-${{ steps.normalize-os-name.outputs.string }}-${{ matrix.toolchain }}:buildcache
          cache-to: |
            type=registry,mode=max,ref=ghcr.io/${{ steps.normalize-repository-name.outputs.string }}-build-${{ steps.normalize-os-name.outputs.string }}-${{ matrix.toolchain }}:buildcache
          build-args: |
            OS_BASE=${{ matrix.os_base }}
            TOOLCHAIN=${{ matrix.toolchain }}
